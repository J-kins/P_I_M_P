# docker-compose.yml - Flexible configuration with profiles
version: '3.8'

x-common-variables: &common-variables
  PIMP_ENV: ${PIMP_ENV:-development}
  PIMP_APP_NAME: ${PIMP_APP_NAME:-pimp}
  TZ: ${TZ:-UTC}

services:
  # PHP Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile.php
      args:
        PIMP_ENV: ${PIMP_ENV:-development}
    container_name: ${PIMP_APP_NAME:-pimp}_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - ./storage/logs:/var/www/html/storage/logs
    environment:
      <<: *common-variables
      # Database connection settings - can point to host or containers
      MYSQL_HOST: ${MYSQL_HOST:-mysql}
      MYSQL_PORT: ${MYSQL_PORT:-3306}
      MONGODB_HOST: ${MONGODB_HOST:-mongodb}
      MONGODB_PORT: ${MONGODB_PORT:-27017}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
    networks:
      - pimp-network
    extra_hosts:
      # Allow container to access host services
      - "host.docker.internal:host-gateway"
    profiles:
      - full
      - app-only
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Server (Nginx)
  webserver:
    image: nginx:alpine
    container_name: ${PIMP_APP_NAME:-pimp}_webserver
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-80}:80"
      - "${WEB_SSL_PORT:-443}:443"
    volumes:
      - .:/var/www/html
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./.docker/ssl:/etc/nginx/ssl
      - ./storage/logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - pimp-network
    profiles:
      - full
      - app-only
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Database (Optional - can use host MySQL)
  mysql:
    image: mysql:8.0
    container_name: ${PIMP_APP_NAME:-pimp}_mysql
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      <<: *common-variables
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-pimp_root_pass}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-pimp_db}
      MYSQL_USER: ${MYSQL_USER:-pimp_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-pimp_pass}
    volumes:
      - pimp_mysql_data:/var/lib/mysql
      - ./config/database/MySQL/backups:/backups
      - ./config/database/MySQL/migrations:/docker-entrypoint-initdb.d
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    networks:
      - pimp-network
    profiles:
      - full
      - db-only
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-pimp_root_pass}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB Database (Optional)
  mongodb:
    image: mongo:6.0
    container_name: ${PIMP_APP_NAME:-pimp}_mongodb
    restart: unless-stopped
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      <<: *common-variables
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-pimp_root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-pimp_root_pass}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-pimp_db}
    volumes:
      - pimp_mongodb_data:/data/db
      - ./config/database/MongoDB/backups:/backups
      - ./config/database/MongoDB/migrations:/docker-entrypoint-initdb.d
    networks:
      - pimp-network
    profiles:
      - full
      - db-only
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: ${PIMP_APP_NAME:-pimp}_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pimp_redis_pass}
    volumes:
      - pimp_redis_data:/data
      - ./config/database/Redis/backups:/backups
    networks:
      - pimp-network
    profiles:
      - full
      - db-only
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js for frontend/build tools (optional)
  node:
    build:
      context: .
      dockerfile: Dockerfile.node
    container_name: ${PIMP_APP_NAME:-pimp}_node
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - /var/www/html/node_modules
    environment:
      <<: *common-variables
    networks:
      - pimp-network
    profiles:
      - full
      - frontend

volumes:
  pimp_mysql_data:
    driver: local
  pimp_mongodb_data:
    driver: local
  pimp_redis_data:
    driver: local

networks:
  pimp-network:
    driver: bridge
    name: ${PIMP_APP_NAME:-pimp}_network